//leetcode. 287. Find the Duplicate Number
approach 1: using hashset

class Solution {
    public int findDuplicate(int[] nums) {
        HashSet<Integer> set=new HashSet<>();
        for(int num : nums){
          if(set.contains(num)){
            return num;
          }else{
            set.add(num);
          }
        }
        return -1;
    }
}

Approach 2: using linked list slow and fast pointer
class Solution {
    public int findDuplicate(int[] nums) {
        int slow = nums[0];
        int fast = nums[0];

        // Phase 1: Find the intersection point in the cycle
        do {
            slow = nums[slow];
            fast = nums[nums[fast]];
        } while (slow != fast);

        // Phase 2: Find the start of the cycle (duplicate number)
        slow = nums[0];
        while (slow != fast) {
            slow = nums[slow];
            fast = nums[fast];
        }

        return slow; // or fast
    }
}
