//leetcode 1358.no of substring containing all three character

approach using sliding window

class Solution {
    public int numberOfSubstrings(String s) {
        int left = 0, count = 0;
        int[] freq = new int[3];  // To store the frequency of 'a', 'b', 'c'
        
        // Traverse the string with the right pointer
        for (int right = 0; right < s.length(); right++) {
            // Update the frequency for the current character
            freq[s.charAt(right) - 'a']++;
            
            // While the window is valid (contains at least one 'a', 'b', and 'c')
            while (freq[0] > 0 && freq[1] > 0 && freq[2] > 0) {
                // All substrings starting from 'left' to 'right' are valid
                count += s.length() - right;
                
                // Shrink the window from the left
                freq[s.charAt(left) - 'a']--;
                left++;
            }
        }
        return count;
    }
}

approach using hash array of size three 

class Solution {
    public int numberOfSubstrings(String s) {
        int hash[]=new int[3];
        int count =0;
        for (int i =0;i<s.length();i++){
            Arrays.fill(hash, 0);
            for(int j=i;j< s.length();j++){
                hash[s.charAt(j) - 'a' ]=1;
                if(hash[0]+hash[1]+hash[2]==3){
                    count++;
                }
            }



approach using sliding window :
class Solution {
    public int numberOfSubstrings(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        int i = 0, j = 0, count = 0;

        while (j < s.length()) {
            char ch = s.charAt(j);
            map.put(ch, map.getOrDefault(ch, 0) + 1);

            // Shrink the window while we have all 3 characters
            while (map.size() == 3) {
                // Every substring starting from i to end at j, j+1, ... is valid
                count += s.length() - j;

                char leftChar = s.charAt(i);
                map.put(leftChar, map.get(leftChar) - 1);
                if (map.get(leftChar) == 0) {
                    map.remove(leftChar);
                }
                i++;
            }
            j++;
        }
        return count;
    }
}

        }
        return count;
    }
}
