//leetcode 234. Palindrome Linked List

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head){
       ListNode fast= head;
       ListNode slow = head;
       while (fast != null && fast.next != null ){
            slow = slow.next;
            fast = fast.next.next;
       }
       return slow ;
    }
    
    public ListNode reverseList( ListNode head){
        if(head == null){
            return head;
        }
        ListNode prev = null;
        ListNode current = head;
        ListNode next = current.next;
        while (current != null){
            current.next= prev;
            prev = current ;
            current = next ;
            if (next != null){
                next = next.next;
            }
        }
        return prev;
    }

    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null) return true;
        ListNode mid = middleNode(head);
        ListNode headReverse = reverseList(mid);
        ListNode headSecond = headReverse;
        while ( head!=null && headReverse != null ){
             if (head.val != headReverse.val){
                break;
             }
             head= head.next;
             headReverse= headReverse.next;
        }
        reverseList( headSecond );
        if(head == null || headReverse == null){
            return true ;
        }
        return false ;

    }
}
