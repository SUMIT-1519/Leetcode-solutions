//leetcode. 1886. Determine Whether Matrix Can Be Obtained By Rotation 

class Solution {
     private int[][] rotate(int[][] mat){
        int n = mat.length;
            int rotated[][]=new int[n][n];        // rotates matrix by 90 degree clockwise 1 times
            for (int i = 0; i < n ; i++){
                for (int j = 0; j < n ; j++){
                   rotated[j][n-i-1]=mat[i][j];
                }
            }
            return rotated;
        }
        private boolean isEqual(int[][] mat , int[][] rotated){
            int n = mat.length;
             for (int i = 0; i < n ; i++){
                for (int j = 0; j < n ; j++){
                    if(mat[i][j] != rotated[i][j]){
                        return false;
                    }

                }
             }
             return true;
        }

    public boolean findRotation(int[][] mat, int[][] target) {

       for (int i = 0 ; i < 4; i ++){
            if(isEqual(mat, target)) return true;    //if intially mat is equal to target it return true if nor it calls rotate functiion and we equate mat to rotated .  
            mat=rotate(mat);
        }
        return false;

    }
}
