//leetcode 0169. Mejority Elements
approach 1

class Solution {
    public int majorityElement(int[] nums) {
       int mElement=0;
       int count=0;
       for(int num : nums){
        if(count==0){
            mElement=num;
            count ++;
        }else{
            if(mElement!=num){
              count--;
            }else{
                count++;
            }
        }
        

       }
       return mElement;
    }
}

approach 2:using hashmap
class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        HashMap <Integer, Integer> map = new HashMap < >();
        for(int i =0; i< nums.length; i++){
            map.put(nums[i], map.getOrDefault(nums[i],0)+1);
        }
      for(Integer key : map.keySet()){
        if(map.get(key)>n/2){
            return key;
        }
      }
      return -1;
    }
}


approach 3:
class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        for(int i=0;i<n;i++){
            int count=0;
            for(int j=0;j<n;j++){
                if(nums[i]==nums[j]){
                    count++;
                }
            }
            if(count>n/2){
                return nums[i];
            }
        }
        return -1;
    }
}
